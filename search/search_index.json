{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter template to generate python projects following the best practices gathered over the time. Installing \u00b6 pip install cookiecutter-python-project A Simple Example \u00b6 import cookiecutter_python_project # noqa # noqa Contributing \u00b6 For guidance on setting up a development environment and how to make a contribution to cookiecutter-python-project , see Contributing to cookiecutter-python-project .","title":"Overview"},{"location":"#installing","text":"pip install cookiecutter-python-project","title":"Installing"},{"location":"#a-simple-example","text":"import cookiecutter_python_project # noqa # noqa","title":"A Simple Example"},{"location":"#contributing","text":"For guidance on setting up a development environment and how to make a contribution to cookiecutter-python-project , see Contributing to cookiecutter-python-project .","title":"Contributing"},{"location":"contributing/","text":"We'd love you to contribute to cookiecutter-python-project ! Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import cookiecutter_python_project.version; print(cookiecutter_python_project.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install cookiecutter-python-project or know it's not relevant to your question or feature request. Pull Requests \u00b6 cookiecutter-python-project is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/cookiecutter-python-project.git cd cookiecutter-python-project Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install cookiecutter-python-project, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: cookiecutter-python-project uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request.","title":"Contributing"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import cookiecutter_python_project.version; print(cookiecutter_python_project.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install cookiecutter-python-project or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"cookiecutter-python-project is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/cookiecutter-python-project.git cd cookiecutter-python-project Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install cookiecutter-python-project, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: cookiecutter-python-project uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGs='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request.","title":"Development facilities"},{"location":"reference/","text":"cookiecutter_python_project special \u00b6 Cookiecutter template to generate python projects following the best practices gathered over the time.. adapters special \u00b6 Module to store the functions shared by the different adapters. config \u00b6 Module to define the configuration of the main program. entrypoints special \u00b6 Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger. load_logger ( verbose = False ) \u00b6 Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in cookiecutter_python_project/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" ) model special \u00b6 Module to store the common business model of all entities. Abstract Classes: services \u00b6 Gather all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose. version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in cookiecutter_python_project/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"repository-pattern version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"Reference"},{"location":"reference/#cookiecutter_python_project","text":"Cookiecutter template to generate python projects following the best practices gathered over the time..","title":"cookiecutter_python_project"},{"location":"reference/#cookiecutter_python_project.adapters","text":"Module to store the functions shared by the different adapters.","title":"adapters"},{"location":"reference/#cookiecutter_python_project.config","text":"Module to define the configuration of the main program.","title":"config"},{"location":"reference/#cookiecutter_python_project.entrypoints","text":"Define the different ways to expose the program functionality. Functions load_logger: Configure the Logging logger.","title":"entrypoints"},{"location":"reference/#cookiecutter_python_project.entrypoints.load_logger","text":"Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in cookiecutter_python_project/entrypoints/__init__.py def load_logger ( verbose : bool = False ) -> None : \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" )","title":"load_logger()"},{"location":"reference/#cookiecutter_python_project.model","text":"Module to store the common business model of all entities. Abstract Classes:","title":"model"},{"location":"reference/#cookiecutter_python_project.services","text":"Gather all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose.","title":"services"},{"location":"reference/#cookiecutter_python_project.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#cookiecutter_python_project.version.version_info","text":"Display the version of the program, python and the platform. Source code in cookiecutter_python_project/version.py def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" info = { \"repository-pattern version\" : __version__ , \"python version\" : sys . version . replace ( \" \\n \" , \" \" ), \"platform\" : platform . platform (), } return \" \\n \" . join ( f \" { k + ':' : >30 } { v } \" for k , v in info . items ())","title":"version_info()"}]}