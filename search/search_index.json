{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter template to generate python projects following the best practices gathered over the time . Sadly it's heavily focused on Github. If you want to use another git web application or CI providers, please open an issue . The template will: Initialize the git repository with the correct github remote and a useful gitignore. Configure the project layout following the src and domain driven design structures. Configure the program dependencies to be handled by pip-tools . Configure a Github Action to hourly update the dependencies. Configure the program documentation using MkDocs , with some niceties like generating a reference page directly from the docstrings . Generate a Makefile to gather the common developer operations, go to the contributing page to look at the most important. Configure the versioning to follow semantic versioning : Assuming you use commit messages following the conventional commits guidelines, you'll be able to automatically bump the version and generate the changelog without human interaction with commitizen . Configure the command line interface. Adding the --version argument to show the current version. Configure management of the program configuration using a yaml file: Configure the installation to create the directory containing the configuration file and copy the template of the default yaml file. Configure the Config object that allows the fetching and setting of the configuration in a friendly dotted way. Create a helper function to output the version of the program, Python and the operative system, useful for debugging user issues. Configure the static analysis tools: Configure Pytest as test framework. Set up the format, directories to ignore and the slow and secondary marks. Configure Black for automatic format and check the code styling. Configure isort to automatically sort the import statements. Configure flakehell to check errors in your code. Configure Mypy to check the typing of your code. Configure Safety to check dependencies that have vulnerabilities. Configure Bandit to check for vulnerabilities in your code. Configure Markdownlint to flag errors, bugs or stylistic errors in markdown files. Configure Github's project: Create the repository. Create the issue and pull request templates. Configure Dependabot to notify on outdated dependencies. Create the secrets to publish to PyPI. Configure the Security advisories. Configure the continuous integration pipelines: Run the tests . Run the linters . Run the type checkers . Run the security checks . Generate coverage reports and upload them to Coveralls . Build the python package. Configure the continuous deployment pipelines: Automatically deploy the documentation static website on each push to master. Automatically build the python packages and publish them to PyPI. Configure the pre-commits . Configure the base typing Set the license to GPLv3. Usage \u00b6 We assume you are comfortable with some tools: cruft or cookiecutter to generate the template. pass : Used to load the sensitive data such as the github credentials. commitizen : Used to bump the version and make the releases. To create a new project use: cruft https://github.com/lyz-code/cookiecutter-python-project Or cookiecutter https://github.com/lyz-code/cookiecutter-python-project Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to cookiecutter-python-project , see Contributing to cookiecutter-python-project .","title":"Cookiecutter Python Project"},{"location":"#usage","text":"We assume you are comfortable with some tools: cruft or cookiecutter to generate the template. pass : Used to load the sensitive data such as the github credentials. commitizen : Used to bump the version and make the releases. To create a new project use: cruft https://github.com/lyz-code/cookiecutter-python-project Or cookiecutter https://github.com/lyz-code/cookiecutter-python-project","title":"Usage"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to cookiecutter-python-project , see Contributing to cookiecutter-python-project .","title":"Contributing"},{"location":"contributing/","text":"Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the versions of: cookiecutter-python-project. Python Your operative system Pull Requests \u00b6 It should be extremely simple to get started and create a Pull Request. cookiecutter-python-project is released regularly so you should see your improvements release in a matter of days or weeks. Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/cookiecutter-python-project.git cd cookiecutter-python-project Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install npm dependencies npm install markdownlint-cli Install cookiecutter-python-project, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: cookiecutter-python-project uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to cookiecutter-python-project !","title":"Contributing"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the versions of: cookiecutter-python-project. Python Your operative system","title":"Issues"},{"location":"contributing/#pull-requests","text":"It should be extremely simple to get started and create a Pull Request. cookiecutter-python-project is released regularly so you should see your improvements release in a matter of days or weeks. Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/cookiecutter-python-project.git cd cookiecutter-python-project Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install npm dependencies npm install markdownlint-cli Install cookiecutter-python-project, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: cookiecutter-python-project uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. Make a new release: To generate the changelog of the new changes, build the package, upload to pypi and clean the build files use make bump . We'd love you to contribute to cookiecutter-python-project !","title":"Development facilities"}]}